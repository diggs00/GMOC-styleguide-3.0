/*
	Note: this styling does NOT account for body overflow-x so a horizontal scrollbar will likely appear unless you account for it.
	
	Important: You MUST import/use the ../../../ts/utils/container-movement.ts utility file if you're using these mixins.
		- You don't have to use the helper functions but the file contains a JS function that runs and updates
		  the CSS variable "--vh" on window resize (Important for iOS Safari)
*/

$timing-function: cubic-bezier(.4, 0, .2, 1) !default;
$timing-scale-up-down: $timing-function !default;
$timing-slide-left-right: $timing-function !default;

$scale-down-time: 450ms !default;
$scale-up-time: 200ms !default;

$slide-left-time: 350ms !default;
$slide-right-time: 200ms !default;

$fade-in-time: 1s !default;

/* Adds styles to scale an element down and back up absolutely positioned with its parent without*/
/* squishing the contents of the element. Intended to be used on container elements.*/
@mixin scale-up-down($width, $top: 100%) {
	max-height: 0;
	overflow: hidden;

	/* Fixed position so the element doesn't impact document flow while hidden,*/
	/* alternative to display: none;*/
	position: fixed;
	top: $top;
	visibility: hidden;
	width: $width;

	@keyframes gb-scale-down {
		from {
			max-height: 0;
		}

		to {
			max-height: calc(var(--vh, 1vh) * 100);;
		}
	}

	@keyframes gb-scale-up {
		from {
			max-height: calc(var(--vh, 1vh) * 100);;
		}

		to {
			max-height: 0;
		}
	}

	&.opening {
		animation: gb-scale-down $scale-down-time $timing-scale-up-down;
	}

	&.closing {
		animation: gb-scale-up $scale-up-time $timing-scale-up-down;
		overflow: hidden;
	}

	&.open {
		@content;

		overflow-y: auto;
	}

	&.opening,
	&.closing,
	&.open {
		display: inline-block;
		position: absolute;
		visibility: visible;
	}
}

/* Adds styles to slide an element left and right absolutely positioned to its parent.*/
/* Intended to be used on container elements.*/
@mixin slide-left-right($top) {
	left: 100%;
	position: fixed;
	top: $top;
	visibility: hidden;
	width: 100%;

	@keyframes gb-slide-left {
		from {
			left: 100%;
		}

		to {
			left: 0;
		}
	}

	@keyframes gb-slide-right {
		from {
			left: 0;
		}

		to {
			left: 100%;
		}
	}

	&.opening {
		animation: gb-slide-left $slide-left-time $timing-slide-left-right;
	}

	&.closing {
		animation: gb-slide-right $slide-right-time $timing-slide-left-right;
	}

	&.open {
		left: 0;
	}

	&.opening,
	&.closing,
	&.open {
		display: inline-block;
		position: absolute;
		visibility: visible;
	}
}

@mixin slide-from-left($width) {
	left: 100%;
	position: fixed;
	top: 0;
	visibility: hidden;
	width: 100%;

	@keyframes gb-slide-from-left {
		from {
			left: -$width;
		}

		to {
			left: 0;
		}
	}

	@keyframes gb-slide-from-right {
		from {
			left: 0;
		}

		to {
			left: -$width;
		}
	}

	&.opening {
		animation: gb-slide-from-left $slide-left-time $timing-slide-left-right;
	}

	&.closing {
		animation: gb-slide-from-right $slide-right-time $timing-slide-left-right;
	}

	&.open {
		left: 0;
	}

	&.opening,
	&.closing,
	&.open {
		display: inline-block;
		visibility: visible;
	}
}

%fade-in {
	opacity: 1;

	&.gb-lazy-waiting {
		opacity: 0;
	}

	&.gb-fade-in {
		opacity: 1;
		transition: opacity 1s;
	}

	&.gb-lazy-error {
		opacity: 1;
		transition: opacity 1s;
	}
}
