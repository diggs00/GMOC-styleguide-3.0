import { prop } from './prop';
import { AttributeParser } from '../utils';
export function component(tag) {
    return function (Ctor) {
        prop('boolean')(Ctor.prototype, 'framework');
        const { onInit } = Ctor.prototype;
        if (onInit) {
            Ctor.prototype.connectedCallback = function () {
                if (!this.framework) {
                    this.onInit();
                }
            };
        }
        customElements.define(tag, Ctor);
    };
}
export class GbdsElement extends HTMLElement {
    constructor() {
        super();
    }
    static get observedAttributes() {
        return this.observedProps.keys();
    }
    attributeChangedCallback(name, oldVal, newVal) {
        const observedProps = this.constructor.observedProps;
        const { changedFn, type } = observedProps.get(name);
        const parsedOldVal = AttributeParser.fromAttribute(oldVal, type);
        const parsedNewVal = AttributeParser.fromAttribute(newVal, type);
        this[changedFn](parsedOldVal, parsedNewVal);
    }
}
GbdsElement.observedProps = new Map();
