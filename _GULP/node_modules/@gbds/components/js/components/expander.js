var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { component, prop } from '../core';
let Expander = class Expander extends HTMLElement {
    constructor() {
        super();
    }
    onInit() {
        this.expanderButton = this.querySelector('.gb-expander-btn');
        this.expanderContent = this.querySelector('.gb-expander-content');
        this.expanderContentBody = this.querySelector('.gb-expander-content-body');
        this.expanderButton.addEventListener('click', () => this.onClick());
        this.expanderButton.addEventListener('keydown', e => this.handleKeydown(e));
        if (!this.dataDisabled && this.expanderButton.hasAttribute('aria-expanded')) {
            this.expanderButton.setAttribute('aria-expanded', this.isOpen.toString());
        }
    }
    disconnectedCallback() {
        this.expanderButton.removeEventListener('click', () => this.onClick());
        this.expanderButton.removeEventListener('keydown', e => this.handleKeydown(e));
    }
    handleKeydown(e) {
        if (e.key === ' ' || e.key === 'Enter') {
            e.preventDefault();
            this.onClick();
        }
    }
    onClick() {
        if (!this.dataDisabled) {
            if (this.isOpen) {
                this.closeExpander();
            }
            else {
                this.openExpander();
            }
        }
    }
    get isOpen() {
        return this.classList.contains('active');
    }
    closeExpander() {
        const expanderContentHeight = this.expanderContentBody.offsetHeight;
        this.expanderContent.style.height = expanderContentHeight + 'px';
        setTimeout(() => {
            this.expanderContent.style.height = '';
            this.classList.remove('active');
            this.expanderButton.setAttribute('aria-expanded', 'false');
        }, 0);
    }
    openExpander() {
        const expanderContentHeight = this.expanderContentBody.offsetHeight;
        this.expanderContent.addEventListener('transitionend', () => {
            this.expanderContent.style.height = '';
        }, { once: true });
        this.classList.add('active');
        this.expanderContent.style.height = expanderContentHeight + 'px';
        this.expanderButton.setAttribute('aria-expanded', 'true');
    }
};
__decorate([
    prop('boolean')
], Expander.prototype, "dataDisabled", void 0);
Expander = __decorate([
    component('gb-expander')
], Expander);
export { Expander };
