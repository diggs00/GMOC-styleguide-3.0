var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { component, prop } from '../../core';
import { GoogleMap } from '../google-map';
import { DlSearchResult } from './dl-search-result';
import { DlSearch } from './dl-search';
let DealerLocator = class DealerLocator extends HTMLElement {
    constructor() {
        super();
    }
    onInit() {
        this.dealerLocatorRootElement = document.createElement('div');
        this.dealerLocatorRootElement.classList.add('gb-dealer-locator-container');
        this.googleMapElement = this.createMapElement();
        this.dealerLocatorRootElement.appendChild(this.googleMapElement);
        const searchElement = this.createSearchElement();
        this.dealerLocatorRootElement.appendChild(searchElement);
        const modalElement = document.createElement('div');
        modalElement.classList.add('gb-dealer-details-modal');
        modalElement.style.display = 'none';
        this.dealerLocatorRootElement.appendChild(modalElement);
        searchElement.addEventListener('searchResultsReady', event => {
            this.displayDealerResult(event.detail.results);
        });
        searchElement.addEventListener('manualSearch', () => {
            this.showViewMoreDealersBtn = true;
        });
        const searchResultsElement = document.createElement('div');
        searchResultsElement.classList.add('q-search-result');
        this.appendChild(this.dealerLocatorRootElement);
        if (this.labels) {
            this.labelsJSON = JSON.parse(this.labels);
        }
        this.setMapOffset();
    }
    displayDealerResult(results) {
        const resultsContainerClassname = 'q-dealer-results-container';
        let selectedMarker;
        const resultContainerElement = document.createElement('div');
        resultContainerElement.classList.add(resultsContainerClassname);
        const markers = [];
        let markerLetter = 65;
        const labels = {
            opensAt: this.labelsJSON.opensAt,
            openUntil: this.labelsJSON.openUntil,
            closingSoon: this.labelsJSON.closingSoon,
            closedNow: this.labelsJSON.closedNow,
            closedToday: this.labelsJSON.closedToday,
            opensTomorrowAt: 'Tomorrow At',
            opensSundayAt: 'Sun:',
            opensMondayAt: 'Mon:',
            opensTuesdayAt: 'Tues:',
            opensWednesdayAt: 'Wed:',
            opensThursdayAt: 'Thurs:',
            opensFridayAt: 'Fri',
            opensSaturdayAt: 'Sat',
            notOpenForNextWeek: 'Closed Next Week',
            offersButtonLabel: 'VIEW ALL OFFERS',
            distanceUnit: this.labelsJSON.distanceUnit,
            serviceLabel: this.labelsJSON.serviceLabel,
            salesLabel: this.labelsJSON.salesLabel,
            backLabel: this.labelsJSON.dealerDetails,
            dealerWebsiteLabel: this.labelsJSON.dealerWebsite,
        };
        for (let i = 0; i < results.length; i++) {
            const dealer = results[i];
            const label = String.fromCharCode(markerLetter++);
            const marker = new google.maps.Marker({
                position: { lat: dealer.geolocation.latitude, lng: dealer.geolocation.longitude },
                label: label,
                title: label,
            });
            marker.addListener('click', () => {
                this.updateSelectedDealer(label);
            });
            markers.push(marker);
            const dealerInfoContainer = document.createElement('div');
            dealerInfoContainer.classList.add('gb-dealer-container');
            const searchElement = new DlSearchResult();
            searchElement.labels = labels;
            searchElement.dealerInfo = dealer;
            searchElement.displayDetails = true;
            searchElement.displayMarker = true;
            searchElement.markerText = label;
            if (i == 0) {
                dealerInfoContainer.classList.add('selected');
                searchElement.selected = true;
                selectedMarker = marker;
            }
            dealerInfoContainer.appendChild(searchElement);
            resultContainerElement.appendChild(dealerInfoContainer);
        }
        const previousResultsElemnt = this.querySelector(`.${resultsContainerClassname}`);
        this.dealerLocatorRootElement.appendChild(resultContainerElement);
        if (previousResultsElemnt) {
            previousResultsElemnt.remove();
        }
        if (this.showViewMoreDealersBtn) {
            const viewMoreDealersBtnContainer = document.createElement('div');
            const viewMoreDealersBtn = document.createElement('button');
            viewMoreDealersBtnContainer.classList.add('q-view-more-dealers-btn-container');
            viewMoreDealersBtn.classList.add('gb-secondary-button', 'view-more-dealers-button');
            viewMoreDealersBtn.innerText = this.labelsJSON.seeMoreDealers;
            viewMoreDealersBtn.addEventListener('click', () => {
                this.dispatchViewMoreDealersEvent();
            });
            viewMoreDealersBtnContainer.appendChild(viewMoreDealersBtn);
            resultContainerElement.appendChild(viewMoreDealersBtnContainer);
        }
        this.googleMapElement.setMarkers(markers);
        if (selectedMarker) {
            google.maps.event.trigger(selectedMarker, 'click');
        }
    }
    setMapOffset() {
        const searchElDimensions = this.querySelector('.gb-dl-search').getBoundingClientRect();
        const large = 960;
        this.googleMapElement.scrollXOffset =
            window.innerWidth < large ? 0 : (searchElDimensions.width + searchElDimensions.left) / 2;
        this.googleMapElement.scrollYOffset = 0;
        window.addEventListener('resize', () => {
            if (window.innerWidth < large) {
                this.googleMapElement.scrollXOffset = 0;
                this.googleMapElement.scrollYOffset = 0;
            }
            else {
                this.googleMapElement.scrollXOffset = (searchElDimensions.width + searchElDimensions.left) / 2;
            }
        });
    }
    get dealerSearchComponent() {
        return this.querySelector('gb-dl-search');
    }
    get currentlySelectedDealer() {
        return this.querySelector(`gb-dl-search-result[selected]:not([selected=false]`);
    }
    dispatchViewMoreDealersEvent() {
        const dlSearch = this.dealerSearchComponent;
        const event = document.createEvent('HTMLEvents');
        event.initEvent('viewMoreDealers', true, true);
        this.showViewMoreDealersBtn = false;
        dlSearch.dispatchEvent(event);
    }
    updateSelectedDealer(label) {
        const currentlySelectedDealer = this.currentlySelectedDealer;
        const newlySelectedDealer = this.querySelector(`gb-dl-search-result[marker-text=${label}]`);
        currentlySelectedDealer.selected = false;
        currentlySelectedDealer.parentElement.classList.remove('selected');
        newlySelectedDealer.selected = true;
        newlySelectedDealer.parentElement.classList.add('selected');
        newlySelectedDealer.parentElement.scrollIntoView({ behavior: 'smooth' });
    }
    createMapElement() {
        const mapElement = new GoogleMap();
        mapElement.clientId = 'gme-adamopelag';
        mapElement.scrollToMarker = this.scrollToMarker;
        mapElement.markerImage = this.markerImage;
        mapElement.markerSelectedImage = this.markerSelectedImage;
        mapElement.clusterImagePath = this.clusterImagePath;
        mapElement.zoom = this.zoom;
        mapElement.cluster = this.cluster;
        return mapElement;
    }
    createSearchElement() {
        const searchElement = new DlSearch();
        searchElement.searchUrl = this.searchUrl;
        searchElement.headline1 = this.headline1;
        searchElement.headline2 = this.headline2;
        searchElement.searchOptions = this.searchOptions;
        searchElement.region = this.region;
        searchElement.language = this.language;
        searchElement.displayBrandSelector = this.displayBrandSelector;
        searchElement.searchBrands = this.searchBrands;
        searchElement.filters = this.filters;
        searchElement.resultCount = this.resultCount;
        searchElement.distance = this.distance;
        searchElement.dealerPlaceholder = this.dealerPlaceHolder;
        searchElement.postalCodePlaceholder = this.postalCodePlaceholder;
        searchElement.cityStatePlaceholder = this.cityStatePlaceholder;
        searchElement.dealerCityPlaceholder = this.dealerCityPlaceholder;
        searchElement.buickBrandImageLogo = this.buickBrandImageLogo;
        searchElement.cadillacBrandImageLogo = this.cadillacBrandImageLogo;
        searchElement.chevroletBrandImageLogo = this.chevroletBrandImageLogo;
        searchElement.gmcBrandImageLogo = this.gmcBrandImageLogo;
        searchElement.labels = this.labels;
        searchElement.maxResults = this.maxResults;
        return searchElement;
    }
};
__decorate([
    prop()
], DealerLocator.prototype, "apiKey", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "channel", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "clientId", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "language", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "region", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "headline1", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "headline2", void 0);
__decorate([
    prop('boolean')
], DealerLocator.prototype, "displayBrandSelector", void 0);
__decorate([
    prop('boolean')
], DealerLocator.prototype, "scrollToMarker", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "searchUrl", void 0);
__decorate([
    prop('array')
], DealerLocator.prototype, "searchOptions", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "defaultSearchType", void 0);
__decorate([
    prop('array')
], DealerLocator.prototype, "searchBrands", void 0);
__decorate([
    prop('number')
], DealerLocator.prototype, "zoom", void 0);
__decorate([
    prop('array')
], DealerLocator.prototype, "filters", void 0);
__decorate([
    prop('number')
], DealerLocator.prototype, "distance", void 0);
__decorate([
    prop('number')
], DealerLocator.prototype, "resultCount", void 0);
__decorate([
    prop('number')
], DealerLocator.prototype, "maxResults", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "cluster", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "dealerPlaceHolder", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "postalCodePlaceholder", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "cityStatePlaceholder", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "dealerCityPlaceholder", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "labels", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "buickBrandImageLogo", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "cadillacBrandImageLogo", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "chevroletBrandImageLogo", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "gmcBrandImageLogo", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "markerImage", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "markerSelectedImage", void 0);
__decorate([
    prop()
], DealerLocator.prototype, "clusterImagePath", void 0);
DealerLocator = __decorate([
    component('gb-dealer-locator')
], DealerLocator);
export { DealerLocator };
