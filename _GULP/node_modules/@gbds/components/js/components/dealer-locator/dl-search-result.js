var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { component, prop } from '../../core';
import { DlSearchResultDetail } from './dl-search-result-detail';
import { DlSearchResultInfo } from './dl-search-result-info';
import { DlSearchModal } from './dl-search-result-modal';
let DlSearchResult = class DlSearchResult extends HTMLElement {
    constructor() {
        super();
        this.dlDaysToLabels = {
            1: 'opensMondayAt',
            2: 'opensTuesdayAt',
            3: 'opensWednesdayAt',
            4: 'opensThursdayAt',
            5: 'opensFridayAt',
            6: 'opensSaturdayAt',
            7: 'opensSundayAt',
        };
    }
    attributeChangedCallback(name) {
        switch (name) {
            case 'selected':
                if (this.markerSvgEl)
                    this.processSelected();
                break;
            default:
                break;
        }
    }
    static get observedAttributes() {
        return ['selected'];
    }
    onInit() {
        if (this.displayMarker) {
            this.initializeMarker();
        }
        this.initializeInfoMarker();
        this.initializeDisplayInfo();
        this.initializeModal();
        if (this.displayDetails) {
            this.initalizeDisplayDetails();
        }
    }
    formatTime(time) {
        if (time.match(/[0-9]{2}:[0-9]{2}\s(AM|PM)/g)) {
            time = time.charAt(3) === '0' ? time.substr(0, 2) + time.substr(5) : time;
            time = time.charAt(0) === '0' ? time.substr(1) : time;
            time = time.replace(' ', '');
        }
        else {
            let hours;
            hours = parseInt(time.substr(0, 2));
            const minutes = parseInt(time.substr(3, 2));
            const amPm = hours < 12 ? 'AM' : 'PM';
            hours = hours % 12;
            hours = hours === 0 ? 12 : hours;
            if (minutes === 0) {
                time = hours.toString() + amPm;
            }
            else {
                time = hours.toString() + ':' + minutes.toString() + amPm;
            }
        }
        return time;
    }
    configureClosedResultDetailOpenStatus(openHours) {
        const nextOpenDay = this.getNextOpenDay(openHours);
        this.searchResultDetail.serviceOpen = false;
        if (!!nextOpenDay) {
            if (nextOpenDay.day === this.today + 1) {
                this.searchResultDetail.openText = this.labels.opensTomorrowAt + ' ';
                this.searchResultDetail.time = this.formatTime(nextOpenDay.openHours.openFrom);
            }
            else {
                const labelKey = this.dlDaysToLabels[nextOpenDay.day];
                this.searchResultDetail.openText = this.labels[labelKey] + ' ';
                this.searchResultDetail.time = this.formatTime(nextOpenDay.openHours.openFrom);
            }
        }
        else {
            this.searchResultDetail.openText = this.labels.notOpenForNextWeek;
        }
    }
    configureOpenResultDetailOpenStatus(todayHours, openHours) {
        const now = new Date();
        const openTime = this.getOpenHourDate(todayHours, 'open');
        const closeTime = this.getOpenHourDate(todayHours, 'close');
        if (now < openTime) {
            this.searchResultDetail.serviceOpen = false;
            this.searchResultDetail.openText = this.labels.opensAt + ' ';
            this.searchResultDetail.time = this.formatTime(todayHours.openFrom);
        }
        else if (now > openTime && now < closeTime) {
            if (closeTime.getTime() - now.getTime() < 60 * 60 * 1000) {
                this.searchResultDetail.serviceOpen = false;
                this.searchResultDetail.openText = this.labels.closingSoon + ' ';
                this.searchResultDetail.time = this.formatTime(todayHours.openTo);
            }
            else {
                this.searchResultDetail.serviceOpen = true;
                this.searchResultDetail.openText = this.labels.openUntil + ' ';
                this.searchResultDetail.time = this.formatTime(todayHours.openTo);
            }
        }
        else if (now > closeTime) {
            this.searchResultDetail.serviceOpen = false;
            this.searchResultDetail.openText = this.labels.closedNow;
        }
    }
    getDayOpenHours(openingHours, day) {
        const openTime = openingHours.find(h => h.dayOfWeek.includes(day));
        return openTime;
    }
    getNextOpenDay(openHours) {
        const allDaysOpen = openHours.flatMap(h => h.dayOfWeek).sort();
        let nextOpenDay;
        for (let search = this.today + 1; search <= 7; search++) {
            const open = allDaysOpen.find(d => d === search);
            if (open) {
                nextOpenDay = open;
                break;
            }
        }
        if (nextOpenDay) {
            return {
                openHours: this.getDayOpenHours(openHours, nextOpenDay),
                day: nextOpenDay,
            };
        }
        for (let search = 1; search <= this.today; search++) {
            const open = allDaysOpen.find(d => d === search);
            if (open) {
                nextOpenDay = open;
                break;
            }
        }
        if (nextOpenDay) {
            return {
                openHours: this.getDayOpenHours(openHours, nextOpenDay),
                day: nextOpenDay,
            };
        }
        else {
            return null;
        }
    }
    getOpenHourDate(today, time) {
        const now = new Date();
        return new Date(`${now.toDateString()} ${time === 'open' ? today.openFrom : today.openTo}`);
    }
    initalizeDisplayDetails() {
        this.searchResultDetail = new DlSearchResultDetail();
        this.updateSearchResultDetail();
        this.appendChild(this.searchResultDetail);
    }
    initializeDisplayInfo() {
        this.searchResultInfo = new DlSearchResultInfo();
        this.updateSearchResultInfo();
        this.appendChild(this.searchResultInfo);
    }
    initializeMarker() {
        this.markerEl = document.createElement('div');
        this.markerEl.classList.add('marker');
        this.markerEl.innerHTML = `
		<div class="text"></div>
		<div class="markerImg"></div>`;
        this.markerSvgEl = this.markerEl.querySelector('.markerImg');
        const textEl = this.markerEl.querySelector('.text');
        textEl.innerText = this.markerText;
        this.processSelected();
        this.appendChild(this.markerEl);
    }
    initializeModal() {
        this.modalContainer = new DlSearchModal();
    }
    initializeInfoMarker() {
        this.infoEl = document.createElement('div');
        this.infoEl.classList.add('info-marker');
        this.infoEl.onclick = () => this.callModal(this.dealerInfo);
        this.appendChild(this.infoEl);
    }
    callModal(dealerInfo) {
        this.modalContainer.style.visibility = 'visible';
        this.modalContainer.style.display = 'block';
        this.dealerSearchEl.style.display = 'none';
        this.resultsContainer.style.display = 'none';
        this.modalContainer.updateStaticElements(dealerInfo, this.labels);
    }
    processSelected() {
        if (this.selected) {
            this.markerSvgEl.style.fill = this.markerColorSelected;
        }
        else {
            this.markerSvgEl.style.fill = this.markerColor;
        }
    }
    updateSearchResultDetail() {
        this.searchResultDetail.servicePhone = this.dealerInfo.generalContact.phone2;
        this.searchResultDetail.serviceLabel = this.labels.serviceLabel;
        this.searchResultDetail.offersLink = this.offersLink;
        this.searchResultDetail.offersButtonText = this.labels.offersButtonLabel;
        if (this.dealerInfo.dealerUrl) {
            this.searchResultDetail.website = this.dealerInfo.dealerUrl;
            this.searchResultDetail.dealerWebsiteLabel = this.labels.dealerWebsiteLabel;
        }
        const todayHours = this.getDayOpenHours(this.dealerInfo.serviceOpeningHour, this.today);
        if (!!todayHours) {
            this.configureOpenResultDetailOpenStatus(todayHours, this.dealerInfo.serviceOpeningHour);
        }
        else {
            this.searchResultDetail.serviceOpen = false;
            this.searchResultDetail.openText = this.labels.closedToday;
        }
    }
    updateSearchResultInfo() {
        const { address } = this.dealerInfo;
        this.searchResultInfo.addressOne = address.addressLine1;
        this.searchResultInfo.addressTwo = address.addressLine2;
        this.searchResultInfo.city = address.cityName;
        this.searchResultInfo.dealerName = this.dealerInfo.dealerName;
        this.searchResultInfo.displayDetails = this.displayDetails;
        this.searchResultInfo.distance = this.dealerInfo.distance;
        this.searchResultInfo.distanceUnit = this.labels.distanceUnit;
        this.searchResultInfo.postalCode = address.postalCode;
        this.searchResultInfo.phone = this.dealerInfo.generalContact.phone1;
        this.searchResultInfo.countrySubdivisionCode = address.countrySubdivisionCode;
    }
    get today() {
        const now = new Date().getDay();
        return now === 0 ? 7 : now;
    }
    get dealerSearchEl() {
        return document.querySelector('gb-dl-search');
    }
    get resultsContainer() {
        return document.querySelector('.q-dealer-results-container');
    }
};
__decorate([
    prop('boolean')
], DlSearchResult.prototype, "displayDetails", void 0);
__decorate([
    prop('boolean')
], DlSearchResult.prototype, "displayMarker", void 0);
__decorate([
    prop('object')
], DlSearchResult.prototype, "dealerInfo", void 0);
__decorate([
    prop('object')
], DlSearchResult.prototype, "labels", void 0);
__decorate([
    prop()
], DlSearchResult.prototype, "markerColor", void 0);
__decorate([
    prop()
], DlSearchResult.prototype, "markerColorSelected", void 0);
__decorate([
    prop()
], DlSearchResult.prototype, "markerText", void 0);
__decorate([
    prop()
], DlSearchResult.prototype, "offersLink", void 0);
__decorate([
    prop('boolean')
], DlSearchResult.prototype, "selected", void 0);
DlSearchResult = __decorate([
    component('gb-dl-search-result')
], DlSearchResult);
export { DlSearchResult };
