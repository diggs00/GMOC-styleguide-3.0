var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { component, prop } from '../../core';
import { MapsApiLoader } from '../../utils';
var BrandMakeCode;
(function (BrandMakeCode) {
    BrandMakeCode["Chevrolet"] = "001";
    BrandMakeCode["Cadillac"] = "006";
    BrandMakeCode["GMC"] = "004";
    BrandMakeCode["Buick"] = "012";
})(BrandMakeCode || (BrandMakeCode = {}));
let DlSearch = class DlSearch extends HTMLElement {
    constructor() {
        super();
        this.selectedSearchType = 'postalCode';
        this.searched = false;
        this.defaultSeacrchType = this.selectedSearchType;
    }
    onInit() {
        this.rootElement = document.createElement('div');
        this.rootElement.classList.add('gb-dl-search');
        const brandName = document.querySelector('.dealer-selector-menu-item')
            ? document.querySelector('.dealer-selector-menu-item').getAttribute('data-brand-name') === 'mcs'
            : null;
        const countryCode = document.querySelector('.dealer-selector-menu-item')
            ? document.querySelector('.dealer-selector-menu-item').getAttribute('data-country-code') === 'ca'
            : null;
        this.isMcsCanada = brandName && countryCode;
        if (this.isMcsCanada) {
            this.dealerSelectorDiv = document.querySelector('.dealer-selector-menu-item');
            this.changeDealer = this.dealerSelectorDiv.getAttribute('data-dealer-change') === 'change';
        }
        this.labelsJSON = this.labels ? JSON.parse(this.labels) : null;
        this.rootElement.innerHTML = this.template;
        this.appendChild(this.rootElement);
        this.init();
    }
    init() {
        this.searchInputElement = this.querySelector('.gb-search-input');
        this.dealerNameInputElement = this.querySelector('.gb-dealer-name');
        this.postalCodeInputElement = this.querySelector('.gb-postal-code');
        if (this.isMcsCanada) {
            this.searchErrorDiv = document.querySelector('.gb-search-error');
            this.searchInputDiv = document.querySelector('.gb-search-input-container');
        }
        const searchEvent = new CustomEvent('manualSearch');
        const searchButton = this.querySelector('.gb-use-location-button');
        searchButton.onclick = () => {
            this.viewMoreDealers = false;
            this.dispatchEvent(searchEvent);
            this.onUseMyLocation();
        };
        const searchDealersButton = this.querySelector('.gb-search-button');
        searchDealersButton.onclick = () => {
            this.viewMoreDealers = false;
            this.dispatchEvent(searchEvent);
            this.onSearchDealers();
        };
        this.addEventListener('viewMoreDealers', () => {
            this.onViewMoreDealers();
        });
        this.setGoogleApi().then(() => {
            if (this.isMcsCanada && this.getPostalCodeFromCookie() !== '') {
                this.searchByPostalcode();
            }
        });
        this.initSearchOptions();
        this.initBrandSelector();
        this.initDealerFilters();
        if (!this.isMcsCanada) {
            this.initializeFilterModal();
        }
        this.updateSearchType();
        if (!this.isMcsCanada) {
            this.addEventListener('searchResultsReady', () => {
                this.updateSearchButtons();
                this.searched = true;
            });
        }
    }
    updateSearchButtons() {
        this.querySelector('.gb-input-fields').insertBefore(this.querySelector('.gb-use-location-button'), this.querySelector('.gb-search-fields'));
        const sideLocationButton = this.querySelector('.gb-use-location-button');
        sideLocationButton.classList.add('location-icon');
        sideLocationButton.textContent = '';
        const searchButton = this.querySelector('.gb-search-button');
        searchButton.textContent = this.labelsJSON ? this.labelsJSON.updateSearchLabel : '';
        if (this.selectedSearchType === 'name') {
            sideLocationButton.classList.add('hide');
        }
    }
    checkIfBrandSelected() {
        let isBrandSelected = !this.displayBrandSelector;
        const brands = document.querySelectorAll('.gb-brand');
        if (this.displayBrandSelector) {
            brands.forEach(function (brand) {
                if (brand.classList.contains('selected'))
                    isBrandSelected = true;
            });
        }
        return isBrandSelected;
    }
    enableDisableNameSearch() {
        const nameInput = this.querySelector('.gb-dealer-name');
        const searchButton = this.querySelector('.gb-search-button');
        this.checkIfBrandSelected() && nameInput.value !== null && nameInput.value !== ''
            ? (searchButton.disabled = false)
            : (searchButton.disabled = true);
    }
    enableDisableCitySearch() {
        const cityInput = this.querySelector('.gb-search-input');
        const searchButton = this.querySelector('.gb-search-button');
        this.checkIfBrandSelected() && cityInput.value !== null && cityInput.value !== ''
            ? (searchButton.disabled = false)
            : (searchButton.disabled = true);
    }
    enableDisablePostSearch() {
        const postCodeInput = this.querySelector('.gb-postal-code');
        const searchButton = this.querySelector('.gb-search-button');
        this.checkIfBrandSelected() && postCodeInput.value !== null && postCodeInput.value !== ''
            ? (searchButton.disabled = false)
            : (searchButton.disabled = true);
    }
    removeAllFilterButtons() {
        const currentFilters = this.querySelector('.gb-selected-filter');
        if (currentFilters) {
            currentFilters.remove();
        }
    }
    showFilters() {
        const template = this.filterInputElements
            .filter(filter => {
            return filter.checked;
        })
            .map(checkedFilters => {
            const label = this.filterMap[checkedFilters.id];
            return `<div class="gb-filter-button" code=${checkedFilters.id}>${label}</span></div>`;
        })
            .join('');
        this.removeAllFilterButtons();
        const element = document.createElement('div');
        element.classList.add('gb-selected-filter');
        element.innerHTML = template;
        this.rootElement.appendChild(element);
        const allFilterButtons = this.rootElement.querySelectorAll('.gb-filter-button');
        allFilterButtons.forEach(element => {
            element.addEventListener('click', event => {
                const element = event.target;
                const code = element.getAttribute('code');
                element.remove();
                const checkboxInput = this.rootElement.querySelector(`input[id="${code}"]`);
                checkboxInput.checked = false;
            });
        });
    }
    initDealerFilters() {
        if (!this.filters) {
            return;
        }
        this.filterMap = this.filters.reduce((map, filter) => {
            map[filter.code] = filter.label;
            return map;
        }, {});
        this.filterButtonElement = this.querySelector('button.gb-dl-search-filter');
        this.filterButtonElement.addEventListener('click', () => {
            this.displayFilterModal();
        });
    }
    initSearchOptions() {
        const radioButtons = this.querySelectorAll('input[name="search-type"]');
        radioButtons.forEach(radioButton => {
            radioButton.addEventListener('click', () => {
                this.updateSearchType();
            });
        });
    }
    disableSearchButton() {
        let searchButton = this.querySelector('.gb-search-button');
        searchButton.disabled = true;
    }
    initBrandSelector() {
        if (!this.displayBrandSelector)
            return;
        const brandElements = this.querySelectorAll('.gb-brand');
        brandElements.forEach(element => {
            element.addEventListener('click', e => {
                this.onBrandElementClick(e);
                this.onErrorSelection();
            });
        });
    }
    updateSearchType() {
        if (!this.isMcsCanada) {
            this.disableSearchButton();
        }
        const selectedSearchTypeElemnt = this.querySelector('input[name="search-type"]:checked');
        if (selectedSearchTypeElemnt) {
            this.selectedSearchType = selectedSearchTypeElemnt.value;
        }
        if (this.selectedSearchType !== 'name') {
            this.dealerNameInputElement.style.display = 'none';
        }
        this.searchInputElement.value = '';
        this.dealerNameInputElement.value = '';
        this.postalCodeInputElement.value = '';
        switch (this.selectedSearchType) {
            case 'name':
                this.searchInputElement.style.display = 'block';
                this.dealerNameInputElement.style.display = 'block';
                this.postalCodeInputElement.style.display = 'none';
                if (this.dealerCityPlaceholder) {
                    this.searchInputElement.setAttribute('placeholder', this.dealerCityPlaceholder);
                }
                if (!this.isMcsCanada) {
                    this.dealerNameInputElement.addEventListener('input', this.enableDisableNameSearch.bind(this));
                    if (this.searched) {
                        this.querySelector('.gb-use-location-button').classList.add('hide');
                    }
                }
                break;
            case 'cityState':
                this.postalCodeInputElement.style.display = 'none';
                this.searchInputElement.style.display = 'block';
                if (this.cityStatePlaceholder) {
                    this.searchInputElement.setAttribute('placeholder', this.cityStatePlaceholder);
                }
                if (!this.isMcsCanada) {
                    this.searchInputElement.addEventListener('input', this.enableDisableCitySearch.bind(this));
                    this.querySelector('.gb-use-location-button').classList.remove('hide');
                }
                break;
            case 'postalCode':
                this.postalCodeInputElement.style.display = 'block';
                this.searchInputElement.style.display = 'none';
                if (!this.isMcsCanada) {
                    this.postalCodeInputElement.addEventListener('input', this.enableDisablePostSearch.bind(this));
                    this.querySelector('.gb-use-location-button').classList.remove('hide');
                }
                break;
        }
    }
    setGoogleApi() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.searchOptions) {
                return;
            }
            const cityState = this.searchOptions.filter(option => {
                if (option.id === 'cityState') {
                    return true;
                }
            });
            if (cityState.length === 0) {
                return;
            }
            yield MapsApiLoader.load({
                clientId: this.clientId,
                apiKey: this.apiKey,
                channel: this.channel,
                region: this.region,
                language: this.language,
            });
            this.setAutocomplete();
        });
    }
    setAutocomplete() {
        const options = {
            componentRestrictions: { country: this.region.toLowerCase() },
            types: this.selectedSearchType === 'address' ? [] : ['(cities)'],
        };
        this.autocomplete = new google.maps.places.Autocomplete(this.searchInputElement, options);
    }
    searchByCityState(cityState = '') {
        const input = cityState || this.searchInputElement.value;
        if (!input) {
            return;
        }
        const address = { address: input };
        this.getCoordinate(address)
            .then(coords => {
            this.searchBylatLong(coords.latitude, coords.longitude);
        })
            .catch(() => {
            const searchStrings = cityState.split(', ');
            const city = `&city=${searchStrings[0]}`;
            const state = `&state=${searchStrings[1]}`;
            const country = searchStrings[2] === 'USA' ? '&country=US' : '';
            const url = `${this.baseSearchUrl}&searchType=citySearch&${city}${state}${country}`;
            this.search(url);
        });
    }
    searchByPostalcode() {
        let postalCode = this.postalCodeInputElement.value;
        if (this.isMcsCanada) {
            if (this.changeDealer) {
                postalCode = this.getPostalCodeFromCookie();
                document.querySelector('.q-wc-dealer-selector-panel').classList.remove('active');
                document.querySelector('.q-wc-dealer-selector-result-panel').classList.add('active');
                this.dealerSelectorDiv.removeAttribute('data-dealer-change');
                this.changeDealer = false;
            }
            const postalCodeError = this.dealerSelectorDiv.getAttribute('data-default-postalcode-error');
            const canadaPostalCodeRegex = /^[ABCEGHJ-NPRSTVXY]\d[ABCEGHJ-NPRSTV-Z][ -]?\d[ABCEGHJ-NPRSTV-Z]\d$/i;
            const postalMatch = canadaPostalCodeRegex.exec(postalCode);
            if (!postalCode) {
                this.searchInputDiv.classList.add('error');
                this.searchErrorDiv.textContent = postalCodeError;
                return;
            }
            else if (postalMatch) {
                this.searchErrorDiv.textContent = '';
                this.searchInputDiv.classList.remove('error');
                const address = { address: `zipcode ${postalCode}` };
                this.getCoordinate(address)
                    .then(coords => {
                    this.searchBylatLong(coords.latitude, coords.longitude);
                    const date = new Date();
                    date.setDate(date.getDate() + 30);
                    document.cookie = "gmwp.selected-postcode=" + postalCode + "; path=/; expires=" + date.toUTCString();
                })
                    .catch(() => {
                    const searchType = `postalCode=${postalCode}`;
                    const url = `${this.baseSearchUrl}&searchType=postalCodeSearch&${searchType}`;
                    this.search(url);
                });
            }
            else {
                this.searchInputDiv.classList.add('error');
                this.searchErrorDiv.textContent = postalCodeError;
            }
        }
        else {
            if (!postalCode) {
                return;
            }
            const address = { address: `zipcode ${postalCode}` };
            this.getCoordinate(address)
                .then(coords => {
                this.searchBylatLong(coords.latitude, coords.longitude);
            })
                .catch(() => {
                const searchType = `postalCode=${postalCode}`;
                const url = `${this.baseSearchUrl}&searchType=postalCodeSearch&${searchType}`;
                this.search(url);
            });
        }
    }
    getCoordinate(address) {
        return __awaiter(this, void 0, void 0, function* () {
            const geocoder = new google.maps.Geocoder();
            return new Promise((resolve, reject) => {
                geocoder.geocode(address, (results, status) => {
                    if (status == google.maps.GeocoderStatus.OK) {
                        const coords = {
                            latitude: results[0].geometry.location.lat(),
                            longitude: results[0].geometry.location.lng(),
                        };
                        resolve(coords);
                    }
                    else if (status == google.maps.GeocoderStatus.ZERO_RESULTS && this.isMcsCanada) {
                        const noResultsError = this.dealerSelectorDiv.getAttribute('data-default-no-results-error');
                        this.searchErrorDiv.textContent = noResultsError;
                    }
                    else {
                        if (this.isMcsCanada) {
                            const genericError = this.dealerSelectorDiv.getAttribute('data-default-generic-error');
                            this.searchErrorDiv.textContent = genericError;
                        }
                        console.warn(`ERROR: ${status}`);
                    }
                    return reject;
                });
            });
        });
    }
    searchBylatLong(latitude, longitude) {
        const url = `${this.baseSearchUrl}&latitude=${latitude}&longitude=${longitude}&searchType=latLongSearch`;
        this.search(url);
    }
    searchByDealerName() {
        const dealerName = this.dealerNameInputElement.value;
        const location = this.searchInputElement.value;
        if (!dealerName) {
            return;
        }
        const countryMap = {
            Canada: 'CA',
            USA: 'US',
        };
        const name = `&dealerName=${dealerName}`;
        if (location && location !== '') {
            const searchStrings = location.split(', ');
            const city = `&city=${searchStrings[0]}`;
            const state = `&state=${searchStrings[1]}`;
            const country = `&country=${countryMap[searchStrings[2]]}`;
            const url = `${this.baseSearchUrl}&searchType=dealerNameSearch${name}${city}${state}${country}`;
            this.search(url);
        }
        else {
            const url = `${this.baseSearchUrl}&searchType=dealerNameSearch${name}`;
            this.search(url);
        }
    }
    search(url) {
        this.getSearchResults(url)
            .then(data => {
            if (data.status === 'success') {
                this.dispatchEvent(new CustomEvent('searchResultsReady', { detail: { results: data.payload.dealers } }));
            }
        })
            .catch(error => {
            this.dispatchEvent(new CustomEvent('searchResultsError', { detail: { results: error } }));
        });
    }
    getPostalCodeFromCookie() {
        const selectedDealer = document.cookie.split('; ').find(row => row.startsWith('gmwp.selected-postcode'));
        return selectedDealer ? selectedDealer.split('=')[1] : '';
    }
    getDealerFilterCodes() {
        if (!this.filterInputElements) {
            return '';
        }
        const selectedFilters = this.filterInputElements.filter(element => {
            return element.checked;
        });
        return selectedFilters
            .map(filter => {
            return filter.getAttribute('id');
        })
            .join(',');
    }
    getSearchResults(url) {
        return __awaiter(this, void 0, void 0, function* () {
            const headers = new Headers({
                'Content-Type': 'application/json; charset=utf-8',
                clientapplicationid: 'quantum',
                locale: `${this.language}-${this.region}`,
            });
            const response = yield fetch(url, {
                method: 'GET',
                headers: headers,
                cache: 'no-cache',
            });
            return response.json();
        });
    }
    getBrandMakeCode() {
        if (this.displayBrandSelector) {
            const selectedBrand = this.querySelector('.gb-brand.selected');
            if (selectedBrand) {
                return BrandMakeCode[selectedBrand.getAttribute('name')];
            }
            return;
        }
        return this.searchBrands
            .map(brand => {
            return BrandMakeCode[brand];
        })
            .join();
    }
    get baseSearchUrl() {
        const makeCodes = this.getBrandMakeCode();
        const viewMoreDealersCount = this.viewMoreDealers ? this.maxResults : this.resultCount;
        const resultCount = viewMoreDealersCount > this.maxResults ? this.maxResults : viewMoreDealersCount;
        const distance = this.distance || 50;
        const dealerFilterCodes = this.getDealerFilterCodes();
        return `${this.searchUrl}?desiredCount=${resultCount}&distance=${distance}&makeCodes=${makeCodes}&serviceCodes=${dealerFilterCodes}`;
    }
    onBrandElementClick(event) {
        const element = event.currentTarget;
        const previousSelecction = this.querySelector('.gb-brand.selected');
        if (previousSelecction) {
            previousSelecction.classList.remove('selected');
        }
        element.classList.add('selected');
        const searchButton = this.querySelector('.gb-search-button');
        switch (this.selectedSearchType) {
            case 'postalCode':
                if (this.postalCodeInputElement.value !== null && this.postalCodeInputElement.value !== '') {
                    searchButton.disabled = false;
                }
                break;
            case 'cityState':
                if (this.searchInputElement.value !== null && this.searchInputElement.value !== '') {
                    searchButton.disabled = false;
                }
                break;
            case 'name':
                if (this.dealerNameInputElement.value !== null && this.dealerNameInputElement.value !== '') {
                    searchButton.disabled = false;
                }
                break;
            default:
                searchButton.disabled = false;
        }
    }
    onFilterDropdownItemClick(event) {
        this.dropdownListElement.classList.remove('show');
        const element = event.target;
        const code = element.getAttribute('id');
        if (code === 'clear') {
            this.removeAllFilterButtons();
            this.filterInputElements.forEach(element => {
                element.checked = false;
            });
        }
        else {
            this.showFilters();
        }
    }
    onDropdownClick() {
        this.dropdownListElement.classList.toggle('show');
    }
    onViewMoreDealers() {
        this.viewMoreDealers = true;
        this.onSearchDealers();
    }
    onSearchDealers() {
        switch (this.selectedSearchType) {
            case 'postalCode':
                this.searchByPostalcode();
                return;
            case 'name':
                this.searchByDealerName();
                break;
            case 'cityState':
                this.searchByCityState();
                return;
        }
    }
    get errorDiv() {
        return this.querySelector('.gb-error-message');
    }
    onErrorSelection() {
        this.errorDiv.style.display = "none";
    }
    onUseMyLocation() {
        const error = (error) => {
            if (this.isMcsCanada) {
                const locationError = this.dealerSelectorDiv.getAttribute('data-default-location-unavailable-error');
                const networkError = this.dealerSelectorDiv.getAttribute('data-default-network-error');
                if (error.code === 1) {
                    this.searchErrorDiv.textContent = locationError;
                }
                else if (error.code === 2) {
                    this.searchErrorDiv.textContent = networkError;
                }
            }
            console.warn(`ERROR(${error.code}): ${error.message}`);
        };
        const success = (position) => {
            if (this.isMcsCanada) {
                this.searchErrorDiv.textContent = '';
            }
            const { latitude, longitude } = position.coords;
            this.searchBylatLong(latitude, longitude);
        };
        navigator.geolocation.getCurrentPosition(success, error);
    }
    get brandSelectorTemplate() {
        if (!this.displayBrandSelector) {
            return '';
        }
        const brandSelector = Object.keys(BrandMakeCode)
            .map(key => {
            return `
					<div class='gb-brand' name="${key}">
						<img src="${this[`${key}`.toLowerCase() + `BrandImageLogo`]}" title=""></img>
						<span>${key}</span>
					</div>`;
        })
            .join('');
        return `<div class="gb-brand-container">${brandSelector}</div>
				<p class="gb-error-message" style="color:red;">${this.labelsJSON ? this.labelsJSON.selectAbrandErrorMessage : ''}</p>`;
    }
    get searchOptionsTemplate() {
        const searchOptions = this.searchOptions;
        if (!searchOptions || searchOptions.length === 0) {
            return '';
        }
        if (searchOptions.length === 1) {
            const { id, label } = searchOptions[0];
            this.defaultSeacrchType = id;
            return `
				<span class="gb-search-label">${label}</span>`;
        }
        const optionsTemplate = searchOptions
            .map(option => {
            const checked = option.id === this.defaultSeacrchType ? 'checked' : '';
            return `
					<div class="gb-search-option">
						<input id="${option.id}" type="radio" name="search-type" value="${option.id}" ${checked}></input>
						<label for="${option.id}">${option.label}</label>
					</div>`;
        })
            .join('');
        return `<div class="gb-search-options">${optionsTemplate}</div>`;
    }
    get filterTemplate() {
        if (!this.filters) {
            return '';
        }
        const withAllDealersTemplate = `
			${this.allDealerOptionTemplate}`;
        return `
			<button class="gb-dl-search-filter gb-secondary-button" >Filter by Dealer Service</button>
			<div class="gb-dropdown-list">
				<ul>
					${withAllDealersTemplate}
				</ul>
			</div>
			`;
    }
    get template() {
        const headline1Template = this.headline1 ? `<div class="gb-title">${this.headline1}</div>` : '';
        const headline2Template = this.headline2 ? `<div class="gb-title-text">${this.headline2}</div>` : '';
        const postalCodePlaceholder = this.postalCodePlaceholder ? this.postalCodePlaceholder : '';
        const dealerPlaceholder = this.dealerPlaceholder ? this.dealerPlaceholder : '';
        const sharedFragment = `
			${headline1Template}
			${headline2Template}
			${this.brandSelectorTemplate}
			${this.searchOptionsTemplate}`;
        if (this.isMcsCanada) {
            this.seperatorText = this.dealerSelectorDiv.getAttribute('data-default-seperator-text');
            this.useLocationText = this.dealerSelectorDiv.getAttribute('data-default-ds-use-location-text');
            this.ariaLabel = this.dealerSelectorDiv.getAttribute('data-default-postalcode-label');
            this.dealerSearchDTM = this.dealerSelectorDiv.getAttribute('data-dealer-search-dtm');
        }
        const mcsTemplate = `
			${sharedFragment}
			<div class="gb-search-input-container">
				<input class="gb-search-input"></input>
				<input class="gb-search-input gb-postal-code stat-input-field" data-dtm="${this.dealerSearchDTM}" aria-label="${this.ariaLabel}" placeholder="${postalCodePlaceholder}"></input>
				<input class="gb-search-input gb-dealer-name" placeholder="${dealerPlaceholder}"></input>
				<button class="gb-search-button gb-secondary-button gb-search-icon stat-search-submit" data-dtm="${this.dealerSearchDTM}"></Button>
			</div>
			<div class="gb-search-error"></div>
			<div class="gb-separator-container">
				<span class="gb-decorative-line1"></span>
				<span class="gb-descriptive2">${this.seperatorText}</span>
				<span class="gb-decorative-line2"></span>
			</div>
			<button class="gb-use-location-button gb-primary-button stat-button-link" data-dtm="${this.dealerSearchDTM}">
				<img src="/etc/clientlibs/solar/img/placeholder_clear.png" alt="" class="gb-compass-icon"/>
				${this.useLocationText}
			</Button>
			${this.filterTemplate}`;
        const nonMcsTemplate = `
			${sharedFragment}
			<div class="gb-input-fields">
				<div class="gb-search-fields">
					<input class="gb-search-input"></input>
					<input class="gb-search-input gb-postal-code" placeholder="${postalCodePlaceholder}"></input>
					<input class="gb-search-input gb-dealer-name" placeholder="${dealerPlaceholder}"></input>
				</div>
			</div>
			<div class="gb-separator-container">
				<span class="gb-descriptive2">
					${this.labelsJSON ? this.labelsJSON.orLabel : ''}
				</span>
			</div>
			<button class="gb-use-location-button gb-secondary-button">
				${this.labelsJSON ? this.labelsJSON.currentLocationTitle : ''}
			</button>
			<button class="gb-search-button gb-primary-button onclick="this.onSearchDealers();">${this.labelsJSON ? this.labelsJSON.searchDealersLabel : ''}</Button>
			${this.filterTemplate}`;
        if (this.isMcsCanada) {
            return mcsTemplate;
        }
        else {
            return nonMcsTemplate;
        }
    }
    initializeFilterModal() {
        if (!document.querySelector('div.gb-dl-filter-modal')) {
            const parentContainer = document.querySelector('div.gb-dealer-locator-container');
            let filterModal = document.createElement('div');
            filterModal.classList.add('gb-dl-filter-modal');
            filterModal.classList.add('hide');
            filterModal.innerHTML = this.filterModalTemplate;
            parentContainer.appendChild(filterModal);
            document.querySelector('a.gb-dl-filtes-back').addEventListener('click', event => {
                this.returnToResults();
            });
        }
    }
    get filterModalTemplate() {
        return `
			<div class="gb-dl-filter-modal-return">
				<a class="gb-dl-filtes-back">Return to Results</a>
			</div>
			${this.brandSelectorTemplate}
			<h2 class="gb-dl-h2">Filter by Dealer Service</h2>
			${this.allDealerOptionTemplate}
			<div class="gb-dl-filter-modal-apply-button-container">
				<button class="db-dl-filter-modal-apply-button">Apply</button>
			</div>
		`;
    }
    displayFilterModal() {
        const filterModal = document.querySelector('div.gb-dl-filter-modal');
        const resultsContainer = document.querySelector('div.q-dealer-results-container');
        const searchContainer = document.querySelector('gb-dl-search');
        if (resultsContainer.classList.contains('show')) {
            resultsContainer.classList.replace('show', 'hide');
        }
        else {
            resultsContainer.classList.add('hide');
        }
        if (searchContainer.classList.contains('show')) {
            searchContainer.classList.replace('show', 'hide');
        }
        else {
            searchContainer.classList.add('hide');
        }
        filterModal.classList.replace('hide', 'show');
    }
    returnToResults() {
        const filterModal = document.querySelector('div.gb-dl-filter-modal');
        const resultsContainer = document.querySelector('div.q-dealer-results-container');
        const searchContainer = document.querySelector('gb-dl-search');
        filterModal.classList.replace('show', 'hide');
        resultsContainer.classList.replace('hide', 'show');
        searchContainer.classList.replace('hide', 'show');
    }
    get allDealerOptionTemplate() {
        const optionsTemplate = this.filters
            .map(filter => {
            return `
					<li>
					<div class="gb-checkbox">
					<input id="${filter.code}" type="checkbox" />
						<label for="${filter.code}">${filter.label}</label>
						</div>
						</li>`;
        })
            .join('');
        const allDealersFilterLabel = this.allDealersFilterLabel || 'All Dealers';
        return `
					<li>
						<div class="gb-checkbox">
							<input id="clear" type="checkbox" />
							<label for="clear">${allDealersFilterLabel}</label>
						</div>
					</li>
					${optionsTemplate}
					`;
    }
};
__decorate([
    prop()
], DlSearch.prototype, "apiKey", void 0);
__decorate([
    prop()
], DlSearch.prototype, "channel", void 0);
__decorate([
    prop()
], DlSearch.prototype, "clientId", void 0);
__decorate([
    prop()
], DlSearch.prototype, "language", void 0);
__decorate([
    prop()
], DlSearch.prototype, "region", void 0);
__decorate([
    prop()
], DlSearch.prototype, "headline1", void 0);
__decorate([
    prop()
], DlSearch.prototype, "headline2", void 0);
__decorate([
    prop('array')
], DlSearch.prototype, "searchOptions", void 0);
__decorate([
    prop()
], DlSearch.prototype, "searchUrl", void 0);
__decorate([
    prop('array')
], DlSearch.prototype, "searchBrands", void 0);
__decorate([
    prop()
], DlSearch.prototype, "defaultSeacrchType", void 0);
__decorate([
    prop('boolean')
], DlSearch.prototype, "displayBrandSelector", void 0);
__decorate([
    prop('boolean')
], DlSearch.prototype, "isMcsCanada", void 0);
__decorate([
    prop('boolean')
], DlSearch.prototype, "changeDealer", void 0);
__decorate([
    prop('array')
], DlSearch.prototype, "filters", void 0);
__decorate([
    prop('number')
], DlSearch.prototype, "distance", void 0);
__decorate([
    prop('number')
], DlSearch.prototype, "resultCount", void 0);
__decorate([
    prop('number')
], DlSearch.prototype, "maxResults", void 0);
__decorate([
    prop()
], DlSearch.prototype, "dealerPlaceholder", void 0);
__decorate([
    prop()
], DlSearch.prototype, "postalCodePlaceholder", void 0);
__decorate([
    prop()
], DlSearch.prototype, "cityStatePlaceholder", void 0);
__decorate([
    prop()
], DlSearch.prototype, "dealerCityPlaceholder", void 0);
__decorate([
    prop()
], DlSearch.prototype, "allDealersFilterLabel", void 0);
__decorate([
    prop()
], DlSearch.prototype, "labels", void 0);
__decorate([
    prop()
], DlSearch.prototype, "buickBrandImageLogo", void 0);
__decorate([
    prop()
], DlSearch.prototype, "cadillacBrandImageLogo", void 0);
__decorate([
    prop()
], DlSearch.prototype, "chevroletBrandImageLogo", void 0);
__decorate([
    prop()
], DlSearch.prototype, "gmcBrandImageLogo", void 0);
DlSearch = __decorate([
    component('gb-dl-search')
], DlSearch);
export { DlSearch };
