var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { component, prop } from '../../core';
let DlSearchResultInfo = class DlSearchResultInfo extends HTMLElement {
    constructor() {
        super();
        this.template = `
	<div class="gb-dl-result-name"></div>
	<div class="gb-dl-result-distance"></div>
	<div class="gb-dl-result-address-container">
		<div class="gb-dl-result-address1"></div>
		<div class="gb-dl-result-address-details"></div>
	</div>
	`;
    }
    attributeChangedCallback(name, oldValue, newValue) {
        switch (name) {
            case 'display-details':
                this.processPhoneElement();
                break;
            default:
                break;
        }
    }
    static get observedAttributes() {
        return ['display-details'];
    }
    onInit() {
        this.innerHTML = this.template;
        this.initializeStaticElements();
        this.updateStaticElements();
        this.processPhoneElement();
    }
    initializePhoneElement() {
        this.phoneEl = document.createElement('div');
        this.phoneEl.classList.add('phone');
        this.updatePhoneElement();
    }
    initializeStaticElements() {
        this.nameEl = this.querySelector('.gb-dl-result-name');
        this.distanceEl = this.querySelector('.gb-dl-result-distance');
        this.address1El = this.querySelector('.gb-dl-result-address1');
        this.addressDetailsEl = this.querySelector('.gb-dl-result-address-details');
        if (this.addressTwo) {
            this.address2El = document.createElement('div');
            this.address2El.classList.add('gb-dl-result-address2');
            this.insertBefore(this.address2El, this.addressDetailsEl);
        }
    }
    processPhoneElement() {
        if (this.phoneEl && !this.displayDetails) {
            this.phoneEl.remove();
        }
        else if (this.phoneEl && this.displayDetails) {
            this.updatePhoneElement();
            this.appendChild(this.phoneEl);
        }
        else if (!this.phoneEl && this.displayDetails) {
            this.initializePhoneElement();
            this.appendChild(this.phoneEl);
        }
    }
    updatePhoneElement() {
        this.phoneEl.innerHTML = "<a href='tel:" + this.phone + "'>" + this.phone + '</a>';
    }
    updateStaticElements() {
        this.nameEl.innerText = this.dealerName;
        this.distanceEl.innerText = this.distanceText;
        this.address1El.innerText = this.addressOne;
        this.addressDetailsEl.innerText = this.addressDetails;
        if (this.addressTwo) {
            this.address2El.innerText = this.addressTwo;
        }
    }
    get addressDetails() {
        return `${this.city}, ${this.countrySubdivisionCode}, ${this.postalCode}`;
    }
    get distanceText() {
        return this.distance + ' ' + this.distanceUnit;
    }
};
__decorate([
    prop()
], DlSearchResultInfo.prototype, "addressOne", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "addressTwo", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "city", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "dealerName", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "distance", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "distanceUnit", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "phone", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "postalCode", void 0);
__decorate([
    prop()
], DlSearchResultInfo.prototype, "countrySubdivisionCode", void 0);
__decorate([
    prop('boolean')
], DlSearchResultInfo.prototype, "displayDetails", void 0);
DlSearchResultInfo = __decorate([
    component('gb-dl-search-result-info')
], DlSearchResultInfo);
export { DlSearchResultInfo };
