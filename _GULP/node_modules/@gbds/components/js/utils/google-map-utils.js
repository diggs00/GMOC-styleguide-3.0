export const addClickPanListener = (marker, map, offsetX = 0, offsetY = 0) => {
    return marker.addListener('click', () => {
        if (offsetX || offsetY) {
            const scale = Math.pow(2, map.getZoom());
            const worldCoordinateCenter = map.getProjection().fromLatLngToPoint(marker.getPosition());
            const pixelOffset = new google.maps.Point(offsetX / scale || 0, offsetY / scale || 0);
            const worldCoordinateNewCenter = new google.maps.Point(worldCoordinateCenter.x - pixelOffset.x, worldCoordinateCenter.y + pixelOffset.y);
            const newOffsetLatLng = map.getProjection().fromPointToLatLng(worldCoordinateNewCenter);
            map.panTo(newOffsetLatLng);
        }
        else {
            map.panTo(marker.getPosition());
        }
    });
};
export function addMarkersToMap(markers, map, clusterer) {
    if (Array.isArray(markers)) {
        markers.forEach(m => m.setMap(map));
        if (clusterer)
            clusterer.addMarkers(markers);
    }
    else {
        markers.setMap(map);
        if (clusterer)
            clusterer.addMarker(markers);
    }
}
export function clearMarkersFromMap(arg) {
    if (Array.isArray(arg)) {
        arg.forEach(m => m.setMap(null));
    }
    else {
        arg.clearMarkers();
    }
}
export const createMarker = (markerOpts) => {
    return new google.maps.Marker(markerOpts);
};
export function extendBounds(bounds, markers) {
    if (Array.isArray(markers)) {
        markers.forEach(m => bounds.extend(m.getPosition()));
    }
    else {
        bounds.extend(markers.getPosition());
    }
    return bounds;
}
