/// <reference types="googlemaps" />
import { GbdsElement } from '../core';
export declare class GoogleMap extends GbdsElement {
    private readonly _centerOfWorld;
    private readonly _defaultZoom;
    private _markers;
    private _markerListeners;
    private _geocoder;
    private _clusterer;
    private _map;
    channel: string;
    clientId: string;
    cluster: boolean;
    clusterImagePath: string;
    language: string;
    markerImage: string;
    markerSelectedImage: string;
    prompt: boolean;
    region: string;
    scrollToMarker: boolean;
    defaultMapLocation?: string | google.maps.LatLng;
    zoom: number;
    markers: google.maps.MarkerOptions[];
    scrollXOffset: number;
    scrollYOffset: number;
    zoomControlPosition: number;
    fullScreenControlPosition: number;
    constructor();
    onInit(): Promise<void>;
    private _addClickSelectedListener;
    private _dispatchGeoError;
    private _getLoaderOptions;
    private _getLocation;
    private _initFromGeocodedLocation;
    private _initMap;
    private _initializeCluster;
    private _configureMarkerIcons;
    private _configureMarkerClickListeners;
    private _updateMarkerListenerOffsets;
    private _updateMarkers;
    private get _zoom();
    addMarker(marker: google.maps.Marker): void;
    clearMarkers(): void;
    geocodeLocation(location: string | google.maps.LatLng | google.maps.LatLngLiteral, region?: string): Promise<google.maps.GeocoderResult>;
    getAllMarkers(): google.maps.Marker[];
    getMarker(position: google.maps.LatLng): google.maps.Marker | undefined;
    setMarkers(markers: google.maps.MarkerOptions[]): void;
    setMarkers(markers: google.maps.Marker[]): void;
    resetMapBounds(): void;
    resetMapCenterAndZoom(): Promise<void>;
    setCenterAndZoom(center: google.maps.LatLng | google.maps.LatLngLiteral, zoom: number): void;
    get center(): google.maps.LatLng;
    get currentZoom(): number;
}
